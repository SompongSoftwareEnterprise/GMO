#!/usr/bin/env ruby

require 'yaml'
require 'digest'

def md5(what)
	Digest::MD5.hexdigest(what)
end


class Fixture

	attr_reader :fixtures

	def initialize
		@fixtures = [ ]
	end

	def load(filename)
		File.open(filename) do |io|
			YAML.each_document(io) do |doc|
				read_doc(doc)
			end
		end
	end

	def read_doc(doc)
		if doc['table']
			doc['data'].tap do |data|
				if data['password']
					data['password_salt'] = md5("this is a salt")
					data['password_hash'] = md5(md5(data['password']) + md5(data['password_salt']))
					data.delete('password')
				end
			end
			fixtures << doc
		end
	end

	def to_sql
		sql = []
		tables = {}
		fixtures.each do |fixture|
			tables[fixture['table']] = true
		end
		sql << "SET FOREIGN_KEY_CHECKS=0;"
		tables.keys.each do |table_name|
			sql << "TRUNCATE #{table_name.table_name};"
		end
		sql << "SET FOREIGN_KEY_CHECKS=1;"
		fixtures.map { |fixture| sql << fixture_to_sql(fixture) }
		sql.join("\n\n")
	end

	def fixture_to_sql(fixture)
		keys = fixture['data'].keys
		columns = keys.map(&:table_name).join(', ')
		values = keys.map { |k| fixture['data'][k] }.map(&:to_s).map(&:sql_escape).join(', ')
		"INSERT INTO #{fixture['table']}\n\t(#{columns})\n\tVALUES (#{values});"
	end

	def to_database
		filename = '/tmp/fixture.sql'
		File.open(filename, 'w') do |io|
			io << to_sql
		end
		system "gmo-restore-database '#{filename}'"
	end

end

class String
	def table_name
		"`#{self}`"
	end
	def sql_escape
		"'#{self.gsub('\'', '\\\'')}'"
	end
end

available_files = Dir['/vagrant/casper/*Test.js']

def color(x)
	"\e[#{x}m#{yield}\e[0m"
end

def run_test(filename)
	data = File.read(filename)
	puts
	puts "#{color('1;32') { '==> Running test:' }} #{File.basename filename}"
	if data =~ /(\/\*\*(.*?)\*\/)/m
		comment = $1
		fixture = Fixture.new
		comment.scan(/@fixture (\S+)/) do
			fixture_filename = File.join(File.dirname(filename), $1)
			puts "==> Loading fixture: #{fixture_filename}"
			fixture.load(fixture_filename)
		end
		fixture.to_database
		puts comment
	end
	system "casperjs test #{filename} --fail-fast"
end

if ARGV.empty?
	puts "Please enter testcase name, or 'all' to test all."
	puts "Available tests:"
	puts available_files.map { |file| '- ' + File.basename(file, '.js') }
else
	if ARGV == ['all']
		test_files = available_files
	else
		test_files = ARGV.map { |arg|
			available_files.find { |file| File.basename(file, '.js') == arg } or raise "Testcase not found"
		}
	end
	test_files.each do |filename|
		run_test(filename)
	end
end










